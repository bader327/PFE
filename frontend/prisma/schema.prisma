generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  ligneId   String?  @db.ObjectId
  createdAt DateTime @default(now())
  ligne     Ligne?   @relation(fields: [ligneId], references: [id])
}

model Event {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  date        DateTime
  ligneId     String?  @db.ObjectId
  ligne       Ligne?   @relation(fields: [ligneId], references: [id])
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  username  String   @unique
  email     String   @unique
  phone     String?
  password  String
  role      Role
  ligneIds  String[] @db.ObjectId
  lignes    Ligne[]  @relation(fields: [ligneIds], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ligne {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  userIds       String[]       @db.ObjectId
  users         User[]         @relation(fields: [userIds], references: [id])
  announcements Announcement[]
  events        Event[]
  files         File[]
}

model File {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  path                String
  ligneId             String?   @db.ObjectId
  hourlyData          HourlyData[]
  fps1                Fps1[]
  
  produitsConformes     Int      @default(0)
  produitsNonConformes  Int      @default(0)
  bobinesIncompletes    Int      @default(0)
  ftq                   Float    @default(0)
  tauxProduction        Float    @default(0)
  tauxRejets            Float    @default(0)
  productionCible       Int      @default(0)
  uploadedAt            DateTime @default(now())
  ligne                 Ligne?   @relation(fields: [ligneId], references: [id])
}

model HourlyData {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  fileId               String    @db.ObjectId
  hour                 Int
  produitsConformes    Int
  produitsNonConformes Int
  total                Int
  file                 File     @relation(fields: [fileId], references: [id])
}

model Fps1 {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  fileId         String? @db.ObjectId
  file           File?   @relation(fields: [fileId], references: [id])

  operateur      String
  defaut         String
  produit        String
  numeroBobine   String
  cause          String
  actions        String
  enregistrer    Boolean @default(false)
  fpsNiveau1     Boolean @default(true)
  fps2           Fps2?
}

model Fps2 {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  fps1Id            String  @unique @db.ObjectId
  fps1              Fps1    @relation(fields: [fps1Id], references: [id])
  chefEquipeProd    String
  chefEquipeQualite String
  probleme          String
  numeroBobine      String
  causeApparente    String
  cause1            String
  cause2            String
  cause3            String
  cause4            String
  action            String
  enregistrer       Boolean @default(false)
  passerNiveau2     Boolean @default(false)
  fps3              Fps3?
}

model Fps3 {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  fps2Id                String   @unique @db.ObjectId
  fps2                  Fps2     @relation(fields: [fps2Id], references: [id])
  handeled              Boolean  @default(false)
  d1Equipe              String
  d2Probleme            String
  d3ActionsImmediates   String
  d4AnalyseCauses       String
  cinqPourquoi          String
  ishikawaDiagram       String
  d5ActionsCorrectives  String
  d6ValidationEfficacite String
  d7ActionsPreventives  String
  d8ClotureRapport      String
  dateCloture           DateTime @default(now())
  pdfPath               String?
}

enum Role {
  SUPERADMIN
  QUALITICIEN
  CHEF_ATELIER
  NORMAL_USER
}
