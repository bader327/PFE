// This is your Prisma schema file.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // ou "sqlite"
  url      = env("DATABASE_URL")

}
model Announcement{
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  ligneId   Int?
  createdAt DateTime @default(now())
  ligne     Ligne?   @relation(fields: [ligneId], references: [id])
}


model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  ligneId     Int?
  ligne       Ligne?   @relation(fields: [ligneId], references: [id])
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  userType  UserType @default(OPERATEUR)
  ligneId   Int?     // si un utilisateur peut Ãªtre sans ligne, sinon enlever le ?
  ligne     Ligne?   @relation(fields: [ligneId], references: [id])
}

model Ligne {
  id            Int           @id @default(autoincrement())
  name          String
  users         User[]
  announcements Announcement[]
  events        Event[]
  files         File[]
}



model File {
  id                   Int       @id @default(autoincrement())
  path                 String
  ligneId              Int?
  ligne                Ligne?    @relation(fields: [ligneId], references: [id])
  produitsConformes     Int
  produitsNonConformes  Int
  bobinesIncompletes   Int
  ftq                  Float
  tauxProduction       Float
  tauxRejets           Float
  productionCible      Int
  uploadedAt           DateTime  @default(now())
  fps1                 Fps1?
}

model Fps1 {
  id             Int     @id @default(autoincrement())
  fileId         Int     @unique
  file           File    @relation(fields: [fileId], references: [id])
  operateur      String
  defaut         String
  produit        String
  numeroBobine   String
  cause          String
  actions        String
  enregistrer    Boolean @default(false)
  fpsNiveau1     Boolean @default(true)
  fps2           Fps2?
}

model Fps2 {
  id                 Int      @id @default(autoincrement())
  fps1Id             Int      @unique
  fps1               Fps1     @relation(fields: [fps1Id], references: [id])
  chefEquipeProd     String
  chefEquipeQualite  String
  probleme           String
  numeroBobine       String
  causeApparente     String
  cause1             String
  cause2             String
  cause3             String
  cause4             String
  action             String
  enregistrer        Boolean  @default(false)
  passerNiveau2      Boolean  @default(false)
  fps3               Fps3?
}

model Fps3 {
  id                    Int      @id @default(autoincrement())
  fps2Id                Int      @unique
  fps2                  Fps2     @relation(fields: [fps2Id], references: [id])
  handeled              Boolean  @default(false)
  d1Equipe              String
  d2Probleme            String
  d3ActionsImmediates   String
  d4AnalyseCauses       String
  cinqPourquoi          String
  ishikawaDiagram       String
  d5ActionsCorrectives  String
  d6ValidationEfficacite String
  d7ActionsPreventives  String
  d8ClotureRapport      String
  dateCloture           DateTime @default(now())
  pdfPath               String?
}

enum UserType {
  MANAGER
  OPERATEUR
  CADRE
}
